/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xil_printf.h"
#include "xil_io.h"	//for low level memory-mapped r/w


volatile int i = 0;
volatile int j = 0;
volatile int k = 0;
volatile int s = 0;
int triggerReg = 0;




int main()
{
    init_platform();


	Xil_Out32(0x41200000, 0x00);
    print("\n\r GPIO Interrupt trigger set low.");

    triggerReg = Xil_In32(0x7AA00000);
    xil_printf("\n\r Trigger SCRegister: %i",triggerReg );

    triggerReg = Xil_In32(0x7AA00004);
    xil_printf("\n\r Pre-trigger delay count Register: %i",triggerReg );

    triggerReg = Xil_In32(0x7AA00008);
    xil_printf("\n\r Post-Trigger assert count register: %i",triggerReg );

    triggerReg = Xil_In32(0x7AA0000C);
    xil_printf("\n\r Pattern register value: %i",triggerReg );

    while(1){
    	//-- reset trigger
    	xil_printf("\n\r Resetting Trigger SC register");
    	Xil_Out32(0x7AA00000, 0x01);
        triggerReg = Xil_In32(0x7AA00000);
        xil_printf("\n\r Trigger SCRegister: %i",triggerReg );

    	xil_printf("\n\r Pre-trigger delay count set to 17");
    	Xil_Out32(0x7AA00004, 17);
        triggerReg = Xil_In32(0x7AA00004);
        xil_printf("\n\r Pre-trigger delay count: %i",triggerReg );


    	xil_printf("\n\r Post trigger assert count set to 23");
    	Xil_Out32(0x7AA00004, 10);
        triggerReg = Xil_In32(0x7AA00008);
        xil_printf("\n\r Post trigger assert count: %i",triggerReg );



    	//--- delay ----
    	for(k = 0; k < 20000000; k++){ s = s + 1; }
    	xil_printf("\n\r waiting...");


    	//---- trigger interrupt ---//
    	for(k = 0; k < 20000000; k++){ s = s + 1; }
    	xil_printf("\n\r Asserting Trigger by GPIO");
    	Xil_Out32(0x41200000, 0x01);
    	Xil_Out32(0x41200000, 0x00);
    	for(k = 0; k < 1000; k++){ s = s + 1; }


    	//-- wait
    	xil_printf("\n\r waiting for some time");
    	for(k = 0; k < 20000000; k++){ s = s + 1; }
    }

    cleanup_platform();
    return 0;
}
